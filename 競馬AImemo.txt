～競馬AI作成～

★欲しい情報と取得する型
競走成績のデータを保持する別のオブジェクトを生成したほうが良さそう。
→生年月日、馬主、生産場所、血統、日付、開催、天気、レース名、グレード、頭数、枠番、馬番、オッズ、人気、着順、騎手、斤量、距離、馬場状態、タイム、着差、通過、ペース、上り(順位はclass名で判別)、その時の馬体重

・開催場所とその戦績
→開催場所を取得し、そこでの勝利数を取得
→→中山[1,2,3,4]

・距離の戦績
→芝2000[1,2,3,4]

・馬場状態
→良[1,2,3,4]

・レースの右回りか左回りかの判定方法
→成績からレースのページを取得するしかなさそう

・脚質
→通過の数字を元に、出馬頭数との割合で脚質を断定。
→→過去レースを参考にし、脚質での順位を予想。

★増点項目(Excelとかにまとめたほうが良さそう。)
○増点数
・◎(3)
・○(2.5)
・▲(2)
・△(1.5)
・☆(1)
・×(0.5)
・ー(0)

○過去レースからのデータ(過去同レースの馬券圏内or掲示板の馬を参照)
※開催場所が変わってしまっている場合は、開催場所と同じデータのみを参照
　過去レースのURLは、重賞スケからseleniumで年と検索ボタンを押して取得
・枠番
→馬券圏内に来ている枠であれば加点(△)

・脚質
→勝ちやすい脚質であれば加点(▲)
→起点が効く脚質(先行もしたことがある等)であっても加点(△)

・同タイムでの高層経験
→同条件の馬場で過去の平均タイムと同じくらいの時計があるなら加点(○)

・上がり順位
→上がり順位が大事なレースなら加点(▲)

・血統
→該当する血統の馬がいれば加点(△)

○競走馬各々のデータ
・クラス
→クラスごとに加点(未勝利：ー,1勝：×,2勝：☆,3勝：△,G3以上掲示板圏内：▲,G2以上掲示板圏内：○,G1以上掲示板圏内：◎)

・内外回り
→どちらが得意かで加点(▲)

・距離適性
→得意な距離なら加点(▲)

・開催場所と育成場所
→坂の厳しい開催場所と、栗東(関西・坂路調教がすごい)、美浦(関東・一般に関西より弱い)で増点。
→→坂開催場所[阪神・中山]
　　小回りコース[福島・小倉]
　　洋芝コース[札幌・函館]
　　平地開催所[その他]
→阪神・中山コースで好走歴があるとさらに加点(○)
→関西所属の競走馬が関西開催であると加点(▲)
→鞍上の所属場所も判定材料

・生産者と馬主
→生産者はノーザンファームや社台ファームで、
　馬主はサンデーレーシングが加点

・レース間隔
→競走馬の全レースの間隔と、その時の成績で休み明けとたたきのどちらがいいかを判断する。
　休み明けがいいなら中N週以上、たたきがいいなら中N周なら加点

・馬体重の増減
→好走歴のある体重と比べ、増減が大丈夫なのかで加点(△)
→大幅増減での成績も評価(☆)

・斤量の増減
→好走歴のある斤量であるかで加点(▲)

・天候と馬場状況
→天候と馬場状況がそれぞれ特異な条件であるかで加点(○)

・騎手が継続騎乗
→継続騎乗か、鞍上経験があるなら加点(▲,△)

・リーディングジョッキー騎乗
→強い騎手が鞍上なら加点(△)
→→seleniumでdbからリーディング順・現役で検索し、上から取得

・多頭数経験
→多頭数でのレース経験があれば加点(☆)

・高速馬場であるか
→先行馬が多いなら差しが...というのを出場場の脚質によって算出し、その脚質であれば加点(▲)

・血統から距離適正があっているか
→距離があっているなら加点
　距離延長・短縮が理にかなっているかで加点

★データの整理
ここでは、収集したデータをもとに、馬の得意不得意をオリジナルに計算する場所です。
ここですべてを判断するわけではなく、あくまでデータを扱いやすくするためのもの。

・芝ダートと距離
→Map(Dict)で、Map<距離,成績[0,0,0,0,0,0]>に格納。
　レースをさらに解析して、内外の得意不得意も判別できるとなお良い。

・開催場所別の成績
→オブジェクトの開催場所名を取り出し、一致(包含)されていたら、その時の着順を確認する。
　配列の大きさを予め定める。
　→１着から５着までと、それ以外の６要素

・クラス
→レース名から抽出し、その時の着順を確認する。

・通過着順からの脚質
→通過着順の最初の順位を全レース取得する。単純に全頭から4で割った数字と比較して、
　逃・先・差・追を決める。一番多かった脚質でいいと思う。脚質を変えていたとしても、その回数が少ないなら当てにならない。

★判定の順序
判定方法を大きく２つ設ける
①馬固有の適正
②過去の同レースからの適正


★今後やることメモ
・https://race.netkeiba.com/race/data_top.html?race_id=202107060311&rf=race_submenu
で過去レースを取得できるように→できなそう
・DBの成績表を取得できるように→それ用のオブジェクトをまた作る？
・レース名をDB(重賞日程)と合うような実装
・余力があれば、欲しいデータの整理と処理の実装
・クラス(グレード)の処理
